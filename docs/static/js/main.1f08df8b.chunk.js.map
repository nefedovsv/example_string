{"version":3,"sources":["components/App/App.module.css","components/SymbolInput/SymbolInput.tsx","components/SymbolTable/SymbolTable.tsx","components/PieChart/PieChart.tsx","components/App/App.tsx","store/Store.ts","index.tsx","store/createStote.ts"],"names":["module","exports","box","SymbolInput","observer","_class2","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","initializerDefineProperty","_descriptor","assertThisInitialized","onChange","e","value","currentTarget","props","store","setValue","inherits","createClass","key","react_default","a","createElement","input","placeholder","validSymbols","prefix","icon","type","style","color","allowClear","Component","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","_class","SymbolTable","SymbolTable_class","symbols","table","dataSource","columns","pagination","title","dataIndex","PieChart","PieChart_class","data","map","item","symbol","count","getColorByChar","dist_default","label","_ref","Math","round","percentage","lineWidth","rounded","height","labelPosition","labelStyle","fontSize","fontFamily","fill","colors","char","random","toString","padStart","App","inject","_dec","App_class","className","styles","SymbolInput_SymbolInput","SymbolTable_SymbolTable","PieChart_PieChart","Store","Store_class","Store_descriptor","symboMapper","getSymbolMapper","updateMap","mapper","Map","split","forEach","reg","RegExp","arrSymbols","match","set","newMap","symbolsMap","get","toConsumableArray","entries","_ref2","slicedToArray","action","getOwnPropertyDescriptor","computed","setValidSymbols","createStore","render","mobx_react_module","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.1f08df8b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"App_box__3n_3L\"};","import React, { Component, ChangeEvent } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { observable } from \"mobx\";\r\nimport { Input, Icon } from \"antd\";\r\nimport { IStore } from \"../../store/IStore\";\r\ninterface SymbolInputProps {\r\n  store: IStore;\r\n}\r\n@observer\r\nexport class SymbolInput extends Component<SymbolInputProps> {\r\n  @observable\r\n  value: string = \"\";\r\n  render(): React.ReactNode {\r\n    const { store } = this.props;\r\n    return (\r\n      <Input\r\n        value={this.value}\r\n        onChange={this.onChange}\r\n        placeholder={`Допустимые для ввода буквы: ${store.validSymbols}`}\r\n        prefix={<Icon type=\"message\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\r\n        allowClear\r\n      />\r\n    );\r\n  }\r\n  onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    this.value = e.currentTarget.value;\r\n    const store: IStore = this.props.store!;\r\n    store.setValue(this.value);\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { IStore } from \"../../store/IStore\";\r\nimport { Table } from \"antd\";\r\nexport interface SymbolTableProps {\r\n    store: IStore;\r\n}\r\n@observer\r\nexport class SymbolTable extends Component<SymbolTableProps> {\r\n    public render(): React.ReactNode {\r\n        const store = this.props.store;\r\n        const data = store.symbols;\r\n        return data.length ? (\r\n            <Table \r\n                dataSource={store.symbols}\r\n                columns={columns}\r\n                pagination={false}\r\n            />\r\n        ) : null;\r\n    }\r\n}\r\nconst columns = [\r\n    {\r\n        title: \"Symbol\",\r\n        dataIndex: \"symbol\",\r\n        key: \"symbol\"\r\n    },\r\n    {\r\n        title: \"Count\",\r\n        dataIndex: \"count\",\r\n        key: \"count\"\r\n    }\r\n];\r\n","import React, { Component } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { IStore } from \"../../store/IStore\";\r\nimport ReactMinimalPieChart from \"react-minimal-pie-chart\";\r\nexport interface PieChartProps {\r\n    store: IStore;\r\n}\r\n\r\n@observer\r\nexport class PieChart extends Component<PieChartProps> {\r\n    public render(): React.ReactNode {\r\n        const store = this.props.store;\r\n\r\n        const data: {\r\n            title: string;\r\n            value: number;\r\n            color: string;\r\n            key: string;\r\n        }[] = store.symbols.map(item => ({\r\n            title: item.symbol,\r\n            value: item.count,\r\n            key: item.symbol,\r\n            color: getColorByChar(item.symbol)\r\n        }));\r\n        return (\r\n            <ReactMinimalPieChart\r\n                data={data}\r\n                label={({ data, dataIndex }) =>\r\n                    Math.round(data[dataIndex].percentage) + \"%\" \r\n                }\r\n                lineWidth={20}\r\n                rounded\r\n                style={{ height: '500px' }}\r\n                labelPosition={60}\r\n                labelStyle={{\r\n                    fontSize: \"5px\",\r\n                    fontFamily: \"sans-serif\",\r\n                    fill: \"#000000\"\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst colors: { [field: string]: string } = {};\r\n\r\nfunction getColorByChar(char: string): string {\r\n    if (!colors[char]) {\r\n        const color: string = `#${Math.round(Math.random() * 0xffffff)\r\n            .toString(16)\r\n            .padStart(6, \"0\")}`;\r\n\r\n        colors[char] = color;\r\n    }\r\n\r\n    return colors[char];\r\n}","import React, { Component } from 'react'\r\nimport { inject } from \"mobx-react\";\r\nimport { SymbolInput } from '../SymbolInput/SymbolInput'\r\nimport { SymbolTable } from '../SymbolTable/SymbolTable'\r\nimport { PieChart } from '../PieChart/PieChart'\r\nimport { IStore } from '../../store/IStore'\r\nimport styles from './App.module.css'\r\n\r\ninterface AppProps {\r\n  store?: IStore;\r\n}\r\n@inject(\"store\")\r\nexport class App extends Component<AppProps> {\r\n\r\n  render(): React.ReactNode {\r\n    const store: IStore = this.props.store!;\r\n    return (\r\n      <div className={styles.box} >\r\n        <div>\r\n          <SymbolInput store={store} />\r\n        </div>\r\n        <div>\r\n          <SymbolTable store={store} />\r\n        </div>\r\n        <div>\r\n          <PieChart store={store} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import { action, computed, observable } from \"mobx\";\r\nimport { IStore, symbolsData } from \"./IStore\";\r\nexport class Store implements IStore {\r\n    validSymbols: string = ''\r\n    @observable symbolsMap = new Map<string, number>()\r\n\r\n    @action\r\n    setValue(value: string) {\r\n        const symboMapper: Map<string, number> = this.getSymbolMapper(value);\r\n        this.updateMap(symboMapper);\r\n    }\r\n    @action\r\n    setValidSymbols(value: string): void {\r\n        this.validSymbols = value\r\n    }\r\n    @computed get symbols(): symbolsData[] {\r\n        const symbols: symbolsData[] = [...this.symbolsMap.entries()].map(([key, value]) => ({\r\n            symbol: key,\r\n            count: value\r\n        }));\r\n        return symbols;\r\n    }\r\n    getSymbolMapper(value: string) {\r\n        const mapper: Map<string, number> = new Map<string, number>();\r\n        const getMap: string[] = this.validSymbols.split(',')\r\n        getMap.forEach((symbol: string) => {\r\n            let reg = new RegExp(symbol, 'g');\r\n            let arrSymbols = value.match(reg);\r\n            if (arrSymbols) {\r\n                mapper.set(arrSymbols[0], arrSymbols.length);\r\n            }\r\n        });\r\n        return mapper\r\n    }\r\n    updateMap(newMap: Map<string, number>): void {\r\n            newMap.forEach((value, key) => {\r\n            this.symbolsMap.set(key, value);\r\n        });\r\n    }\r\n} ","import React from 'react'\r\nimport { render } from 'react-dom'\r\nimport { Provider } from 'mobx-react'\r\nimport 'antd/dist/antd.css'\r\nimport { App } from './components/App/App'\r\nimport { createStore } from './store/createStote'\r\n\r\nconst store = {\r\n  store: createStore('a,b,c'),\r\n}\r\nrender(\r\n  <Provider {...store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n","import { Store } from './Store'\r\nimport { IStore } from './IStore'\r\nexport function createStore(validSymbols: string): IStore {\r\n  const store: Store = new Store()\r\n  store.setValidSymbols(validSymbols)\r\n  return store\r\n}\r\n"],"sourceRoot":""}